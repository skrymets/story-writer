/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tigri.writer.mindmap.editor.ui;

import java.awt.Rectangle;
import static java.util.Objects.requireNonNull;
import java.util.Optional;
import javax.swing.JComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.graph.layout.GraphLayout;
import org.netbeans.api.visual.graph.layout.GraphLayoutSupport;
import org.netbeans.api.visual.layout.LayoutFactory;
import org.netbeans.api.visual.layout.SceneLayout;
import org.netbeans.api.visual.widget.LabelWidget;
import org.netbeans.api.visual.widget.Scene;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.tigri.writer.mindmap.controller.api.MindMapController;
import org.tigri.writer.mindmap.model.MindMap;
import org.tigri.writer.mindmap.model.MindMapLink;
import org.tigri.writer.mindmap.model.MindMapNode;
import org.tigri.writer.mindmap.project.api.MindMapProject;
import org.tigri.writer.mindmap.view.MindMapLayout;
import org.tigri.writer.mindmap.view.MindMapScene;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.tigri.writer.mindmap.editor.ui//MindMapEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MindMapEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_MindMapEditorAction=MindMap Editor",
    "CTL_MindMapEditorTopComponent=MindMap Editor Window",
    "HINT_MindMapEditorTopComponent=MindMap Editor window"
})
public final class MindMapEditorTopComponent extends TopComponent {

    private static final long serialVersionUID = 1437909432107326363L;

    private MindMapProject project;

    public MindMapEditorTopComponent(MindMapProject project) {
        this();
        requireNonNull(project);
        this.project = project;

        MindMap mindMap = project.getLookup().lookup(MindMap.class);

        JComponent sceneView = buildScene(mindMap).createView();
        contentScrollPane.setViewportView(sceneView);
    }

    private MindMapEditorTopComponent() {
        initComponents();

        setName(Bundle.CTL_MindMapEditorTopComponent());
        setToolTipText(Bundle.HINT_MindMapEditorTopComponent());

        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
    }

    public Optional<MindMapProject> getProject() {
        return Optional.ofNullable(project);
    }

    void setProject(MindMapProject project) {
        this.project = project;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentScrollPane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        contentScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        contentScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        add(contentScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane contentScrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public boolean canClose() {
        return getProject().isPresent();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public final void setName(String name) {
        super.setName(name);
    }

    @Override
    public final void setToolTipText(String toolTip) {
        super.setToolTipText(toolTip);
    }

    private Scene buildScene(MindMap mindMap) {

        final int HALF_INT = (Integer.MAX_VALUE / 2);

        MindMapController mmc = Lookup.getDefault().lookup(MindMapController.class);
        MindMapScene scene = new MindMapScene();

        mmc.addMindMapListener(scene);

        scene.setMaximumBounds(new Rectangle(-HALF_INT, -HALF_INT, HALF_INT, HALF_INT));
        //scene.setPreferredBounds(new Rectangle (-1000, -1000, 1000, 1000));
        scene.getActions().addAction(ActionFactory.createZoomAction());
        scene.getActions().addAction(ActionFactory.createPanAction());

        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        MindMapNode rootNode = mindMap.getRoot();
        
        LabelWidget rootNodeWidget = (LabelWidget) scene.addNode(rootNode);
        rootNodeWidget.setLabel(rootNode.getData());

        // Add some demo nodes
        
        MindMapNode node1 = mmc.createNewChildNode(rootNode, "This is just a proof-of-concept");
        MindMapNode node2 = mmc.createNewChildNode(rootNode, "node2w");

        scene.revalidate();
        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        // GraphLayout<MindMapNode, MindMapLink> layout = GraphLayoutFactory.createTreeGraphLayout(0, 0, 10, 30, false);
        GraphLayout<MindMapNode, MindMapLink> layout = new MindMapLayout(scene);
        //TreeGraphLayout(0, 0, 10, 30, false);
        GraphLayoutSupport.setTreeGraphLayoutRootNode(layout, rootNode);

        SceneLayout sceneLayout = LayoutFactory.createSceneGraphLayout(scene, layout);
        sceneLayout.invokeLayoutImmediately();

        return scene;
    }

}
